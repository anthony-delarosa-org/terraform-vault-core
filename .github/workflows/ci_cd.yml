# This is a basic workflow to help you get started with Actions

name: CI + CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      plan:
        description: 'plan or plan -destroy'
        default: 'plan'
        required: true
      apply:
        description: 'apply or apply -destroy'
        default: 'apply'
        required: true

  # Default Working Directory
defaults:
  run:
    working-directory: ./ent-infra-engineering-hcp/workspaces/dev/hcp
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tflint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2.0.0
      name: Setup TFLint

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact
  #Lint:
  #  name: Lint Code Base
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout Repo
  #      uses: actions/checkout@v3
  #     
  #    - name: Lint Code Base
  #      uses: github/super-linter/slim@v4
  #      env:
  #        VALIDATE_ALL_CODEBASE: false
  #        DEFAULT_BRANCH: main
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  DevHCP:
    #if: "contains(github.event.head_commit.message, 'build')"
    name: Deploy HCP
    runs-on: ubuntu-latest
    needs: [tflint]
    #env:
    # environment: dev
    #  work_dir: ./ent-infra-engineering-hcp/workspaces/dev/hcp

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - name: Check URL Endpoint
        id: check-flag
        run: |
          if curl -Li --output /dev/null --silent --head --fail https://www.google.ca ; then
            echo "url_endpoint=true"
          else
            echo "URL Endpoint Unreachable"
          fi
        shell: bash
            
      - name: Primary Vault Cluster
        id: primary-vault-cluster
        uses: hashicorp/vault-action@v2.4.1
        if: env.url_endpoint == "true"
        with:
          url: ${{ secrets.PRIMARY_VAULT_URL }}
          token: ${{ secrets.PRIMARY_VAULT_TOKEN }}
          #method: token
          namespace: admin
          extraHeaders: |
            x-api-key: ${{ secrets.PRIMARY_API_GATEWAY_KEY }}
          secrets: |
            secrets/data/web_app url | URL ;

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        if: env.url_endpoint == "true"
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
          terraform_wrapper: false

      - name: List files
        if: steps.check-flag.url.outputs == 'true'
        run: |
          pwd && ls -la
          echo "This is API Key: ${{env.URL}}"
          
      - name: Secondary Vault Cluster
        id: secondary-vault-closter
        uses: hashicorp/vault-action@v2.4.1
        if: steps.check-flag.url.outputs != 'true'
        with:
          url: ${{secrets.SECONDARY_VAULT_URL}}
          token: ${{ secrets.SECONDARY_VAULT_TOKEN }}
          #method: token
          namespace: admin
          extraHeaders: |
            x-api-key: ${{ secrets.SECONDARY_API_GATEWAY_KEY }}
          secrets: |
            secrets/data/web_app url | URL ;
 
#      - name: Terraform fmt
#        id: fmt
#        working-directory: ${{ env.work_dir }}
#        run: pwd && ls -la && terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        working-directory: ${{ env.work_dir }}
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        working-directory: ${{ env.work_dir }}
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        working-directory: ${{ env.work_dir }}
#        run: terraform ${{ github.event.inputs.plan }} -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
#        continue-on-error: false
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        working-directory: ${{ env.work_dir}}
#        run: exit 1
#
#      - name: Terraform Apply
#        id: apply
#        working-directory: ${{ env.work_dir }}
#        run: terraform ${{ github.event.inputs.apply }} -auto-approve -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"

#  StageHCP:
#    #if: "contains(github.event.head_commit.message, 'build')"
#    name: Deploy HCP
#    needs: [DevHCP]
#    runs-on: ubuntu-latest
#    env:
#      environment: stg
#      work_dir: ./ent-infra-engineering-hcp/workspaces/stg/hcp
#
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v3
#
#      - name: HashiCorp - Setup Terraform
#        uses: hashicorp/setup-terraform@v2.0.0
#        with:
#          terraform_version: 1.2.2
#          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
#          terraform_wrapper: false
#
#      - name: Terraform fmt
#        id: fmt
#        working-directory: ${{ env.work_dir }}
#        run: terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        working-directory: ${{ env.work_dir }}
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        working-directory: ${{ env.work_dir }}
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        working-directory: ${{ env.work_dir }}
#        run: terraform ${{ github.event.inputs.plan }} -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
#        continue-on-error: false
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        working-directory: ${{ env.work_dir}}
#        run: exit 1
#
#      - name: Terraform Apply
#        id: apply
#        working-directory: ${{ env.work_dir }}
#        run: terraform ${{ github.event.inputs.apply }} -auto-approve -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"

#  Stg:
#    name: Deploy Vault Cluster
#    runs-on: ubuntu-latest
#    needs: [DeployDev]
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v3
#
#      - name: HashiCorp - Setup Terraform
#        uses: hashicorp/setup-terraform@v2.0.0
#        with:
#          terraform_version: 1.2.2
#          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
#          terraform_wrapper: false
#
#      - name: Terraform fmt
#        id: fmt
#        working-directory: ./workspaces/vault_provision
#        run: terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        working-directory: ./workspaces/vault_provision
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        working-directory: ./workspaces/vault_provision
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        working-directory: ./workspaces/vault_provision
#        run: terraform ${{ github.event.inputs.plan }} -no-color -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="tier=dev" -var="vault_cluster_id=${{ secrets.VAULT_CLUSTER_ID }}"
#        continue-on-error: false
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        working-directory: ./workspaces/vault_provision
#        run: exit 1
#
#      - name: Terraform Apply
#        id: apply
#        working-directory: ./workspaces/vault_provision
#        run: terraform ${{ github.event.inputs.apply }} -auto-approve -no-color -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=${{ secrets.HVN_ID }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"


#  Prod:
#    runs-on: ubuntu-latest
#    name: Deploy to Prod
#    needs: [DeployStg]
#    environment:
#      name: Production
#    steps:
#      - uses: actions/checkout@v3
#      - run: |
#          echo ${{ secrets.ENVIRONMENT }} has been Deployed!
