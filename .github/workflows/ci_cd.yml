# This is a basic workflow to help you get started with Actions

name: CI + CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Default Working Directory
defaults:
  run:
    working-directory: ./workspaces/hcp
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  DeployDev:
    #if: "contains(github.event.head_commit.message, 'build')"
    runs-on: ubuntu-latest
    name: Deploy to Dev
    environment:
      name: Development
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=plan.out -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=${{ secrets.HVN_ID }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}" && terraform show -json plan.out > plan.out.json
        continue-on-error: false

      - name: Terraform-Compliance
        id: terraform-compliance from remote repo
        run: |
          ls -la
          terraform-compliance -p plan.out.json -f git:ssh://git@github.com/terraform-compliance/user-friendly-features.git

      #- name: terraform-compliance
      #  uses: terraform-compliance/github_action@main
      #  with:
      #    plan: plan.out.json
      #    features: ssh://git@github.com/terraform-compliance/user-friendly-features.git

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

#      - name: Terraform Apply
#        id: apply
#        run: terraform apply -aut-approve -no-color -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=${{ secrets.HVN_ID }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
      
          
  DeployStg:
    runs-on: ubuntu-latest
    name: Deploy to Stg
    needs: [DeployDev]
    environment:
      name: Staging
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo ${{ secrets.ENVIRONMENT }} has been Deployed!

  DeployProd:
    runs-on: ubuntu-latest
    name: Deploy to Prod
    needs: [DeployStg]
    environment:
      name: Production
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo ${{ secrets.ENVIRONMENT }} has been Deployed!
