# This is a basic workflow to help you get started with Actions

name: CI + CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      plan:
        description: 'plan or plan -destroy'
        default: 'plan'
        required: true
      apply:
        description: 'apply or apply -destroy'
        default: 'apply'
        required: true

  # Default Working Directory
#defaults:
  #run:
  #  working-directory: ./ent-infra-engineering-hcp/workspaces/dev/hcp
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tflint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      name: Checkout source code

    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2.0.0
      name: Setup TFLint

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact
  #Lint:
  #  name: Lint Code Base
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout Repo
  #      uses: actions/checkout@v3
  #     
  #    - name: Lint Code Base
  #      uses: github/super-linter/slim@v4
  #      env:
  #        VALIDATE_ALL_CODEBASE: false
  #        DEFAULT_BRANCH: main
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  DevHCP:
    #if: "contains(github.event.head_commit.message, 'build')"
    name: Get Vault Secrets
    runs-on: ubuntu-latest
    needs: [tflint]
    #env:
    # environment: dev
    #  work_dir: ./ent-infra-engineering-hcp/workspaces/dev/hcp

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - name: Check URL Endpoint
        id: check-flag
        run: |
          if [ $(curl --header "x-api-key: ${{ secrets.PRIMARY_API_GATEWAY_KEY }}" ${{ secrets.PRIMARY_VAULT_URL }} -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then
            echo "Checking connectivity to the Primary Vault cluster"
            echo "::set-output name=vault_token::${{ secrets.PRIMARY_VAULT_TOKEN }}" 
            echo "::set-output name=vault_url::${{ secrets.PRIMARY_VAULT_URL }}"
            echo "::set-output name=vault_api_key::${{ secrets.PRIMARY_API_GATEWAY_KEY }}"
            echo "Primary Vault cluster is up and using that connection."
          elif [ $(curl --header "x-api-key: ${{ secrets.SECONDARY_API_GATEWAY_KEY }}" ${{ secrets.SECONDARY_VAULT_URL }} -o /dev/null -w '%{http_code}\n' -s) == "200" ]; then
            echo "Checking connectivity to the Secondary Vault cluster"
            echo "::set-output name=vault_token::${{ secrets.SECONDARY_VAULT_TOKEN }}" 
            echo "::set-output name=vault_url::${{ secrets.SECONDARY_VAULT_URL }}" 
            echo "::set-output name=vault_api_key::${{ secrets.SECONDARY_API_GATEWAY_KEY }}" 
            echo "Secondary Vault cluster is up and using that connection." 
          else
            echo "Both Vaults are down or something went wrong."
          fi

      - name: Display
        run: |
          echo "Check Flag: ${{ steps.check-flag.outputs.vault_url }}"
            
      - name: Vault Cluster
        id: vault-cluster
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: ${{ steps.check-flag.outputs.vault_url }}
          token: ${{ steps.check-flag.outputs.vault_token }}
          #method: token
          namespace: admin
          extraHeaders: |
            x-api-key: ${{ steps.check-flag.outputs.vault_api_key }}
          secrets: |
            secrets/data/hcp_it_all_hands hcp_username | HCP-USERNAME ;
            secrets/data/hcp_it_all_hands hcp_password | HCP-PASSWORD ;

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
          terraform_wrapper: false

      - name: Print Password from Vault
        run: |
          echo "These are the Creds extracted from Vault: ${{env.HCP-USERNAME}} ${{env.HCP-PASSWORD}}"
