# This is a basic workflow to help you get started with Actions

name: CI + CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      plan:
        description: 'plan or plan -destroy'
        default: 'plan'
        required: true
      apply:
        description: 'apply or apply -destroy'
        default: 'apply'
        required: true

  # Default Working Directory
defaults:
  run:
    working-directory: workspaces/hcp
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Lint:
    name: Lint Code Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
       
      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  DeployDev:
    #if: "contains(github.event.head_commit.message, 'build')"
    name: Deploy HCP
    runs-on: ubuntu-latest
    needs: [Lint]
    env:
      environment: dev
      work_dir: ./workspaces/hcp
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        working-directory: ${{ env.work_dir }}
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ${{ env.work_dir }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.work_dir }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.work_dir }}
        run: terraform ${{ github.event.inputs.plan }} -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: ${{ env.work_dir}}
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.work_dir }}
        run: terraform ${{ github.event.inputs.apply }} -auto-approve  -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=hv-personal-${{ env.environment }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
          
#  DeployStg:
#    name: Deploy Vault Cluster
#    runs-on: ubuntu-latest
#    needs: [DeployDev]
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@v3
#
#      - name: HashiCorp - Setup Terraform
#        uses: hashicorp/setup-terraform@v2.0.0
#        with:
#          terraform_version: 1.2.2
#          cli_config_credentials_token: ${{ secrets.TFC_API_KEY }}
#          terraform_wrapper: false
#
#      - name: Terraform fmt
#        id: fmt
#        working-directory: ./workspaces/vault_provision
#        run: terraform fmt -check
#        continue-on-error: true
#
#      - name: Terraform Init
#        id: init
#        working-directory: ./workspaces/vault_provision
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        working-directory: ./workspaces/vault_provision
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        working-directory: ./workspaces/vault_provision
#        run: terraform ${{ github.event.inputs.plan }} -no-color -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="tier=dev" -var="vault_cluster_id=${{ secrets.VAULT_CLUSTER_ID }}"
#        continue-on-error: false
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        working-directory: ./workspaces/vault_provision
#        run: exit 1
#
#      - name: Terraform Apply
#        id: apply
#        working-directory: ./workspaces/vault_provision
#        run: terraform ${{ github.event.inputs.apply }} -auto-approve -no-color -var="hcp_client_id=${{ secrets.HCP_CLIENT_ID }}" -var="hcp_client_secret=${{ secrets.HCP_CLIENT_SECRET }}" -var="hvn_id=${{ secrets.HVN_ID }}" -var="aws_default_region=${{ secrets.AWS_DEFAULT_REGION }}"
#
#
#  DeployProd:
#    runs-on: ubuntu-latest
#    name: Deploy to Prod
#    needs: [DeployStg]
#    environment:
#      name: Production
#    steps:
#      - uses: actions/checkout@v3
#      - run: |
#          echo ${{ secrets.ENVIRONMENT }} has been Deployed!
